step "create-resource-group" {
    name = "Create Resource Group"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                & az group create --name $ResourceGroupName --location $az_location
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template" {
    condition = "Variable"
    name = "Create AZ DB"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = "DatabaseARM.json"
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "DatabaseARMParameters.json"
            Octopus.Action.Azure.TemplateSource = "Package"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Database"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-db-schema" {
    condition = "Variable"
    name = "Create DB Schema"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Database"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "Scripts\\UpdateAzureSql.ps1"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "get-db-connection-string" {
    name = "Get DB Connection String"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                $connstring = az sql db show-connection-string --server $DatabaseServerName --name $DatabaseName --client ado.net
                $connstring = $connstring -replace '<username>', $DatabaseUser -replace '<password>', $DatabasePassword -replace '"', ''
                Write-Host "Connection String: $connstring"
                Set-OctopusVariable -name "connstring" -value $connstring
                ###################################################################
                
                
                
                
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template-1" {
    condition = "Variable"
    name = "Create Container App Environment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "location": {
                      "defaultValue": "canadacentral",
                      "type": "String"
                    },
                    "environment_name": {
                      "defaultValue": "myenvironment",
                      "type": "String"
                    }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('environment_name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                      }
                    }
                  ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"location\":{\"value\":\"#{az_location}\"},\"environment_name\":{\"value\":\"#{container_app_environment_name}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template-2" {
    condition = "Variable"
    name = "Create Container App"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "containerappName": {
                      "defaultValue": "mycontainerapp",
                      "type": "String"
                    },
                    "location": {
                      "defaultValue": "canadacentral",
                      "type": "String"
                    },
                    "environment_name": {
                      "defaultValue": "myenvironment",
                      "type": "String"
                    },
                    "container_image": {
                      "type": "String"
                    },
                    "registry_password": {
                      "type": "SecureString"
                    },
                    "connection_string": {
                      "type": "SecureString"
                    }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "apiVersion": "2022-03-01",
                      "type": "Microsoft.App/containerApps",
                      "name": "[parameters('containerappName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "None"
                      },
                      "properties": {
                        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environment_name'))]",
                        "configuration": {
                          "secrets": [
                            {
                              "name": "registrypassword",
                              "value": "[parameters('registry_password')]"
                            }
                          ],          
                          "ingress": {
                            "external": true,
                            "targetPort": 80,
                            "allowInsecure": false,
                            "traffic": [
                              {
                                "latestRevision": true,
                                "weight": 100
                              }
                            ]
                          },
                          "registries": [
                            {
                              "server": "#{registry_login_server}",
                              "username": "#{az_login_appid}",
                              "passwordSecretRef": "registrypassword"
                            }
                          ]
                        },
                        "template": {
                          "revisionSuffix": "[uniqueString(resourceGroup().id, deployment().name)]",
                          "containers": [
                            {
                              "name": "main",
                              "image": "[parameters('container_image')]",
                              "env": [
                                {
                                  "name": "HTTP_PORT",
                                  "value": "80"
                                },
                                {
                                  "name": "ConnectionStrings__SqlConnectionString",
                                  "value": "[parameters('connection_string')]"
                                }
                              ],
                              "resources": {
                                "cpu": 0.25,
                                "memory": "0.5Gi"
                              }
                            }
                          ],
                          "scale": {
                            "minReplicas": 0,
                            "maxReplicas": 1,
                            "rules": [{
                              "name": "http-rule",
                              "http": {
                                "metadata": {
                                  "concurrentRequests": "1"
                                }
                              }
                            }]
                          }
                        }
                      }
                    }
                  ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"containerappName\":{\"value\":\"#{container_app_name}\"},\"location\":{\"value\":\"#{az_location}\"},\"environment_name\":{\"value\":\"#{container_app_environment_name}\"},\"container_image\":{\"value\":\"#{container_image}\"},\"registry_password\":{\"value\":\"#{az_login_appkey}\"},\"connection_string\":{\"value\":\"#{connection_string}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "get-container-app-fqdn" {
    name = "Get Container App FQDN"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                $fqdn = az containerapp show --name $container_app_name --resource-group $ResourceGroupName --query properties.configuration.ingress.fqdn
                Write-Host "FQDN: $fqdn"
                Set-OctopusVariable -name "app_fqdn" -value $fqdn
                ###################################################################
                
                
                
                
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "add-revision-to-container-app" {
    condition = "Variable"
    name = "Add Revision to Container App"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist != \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzurePowerShell"
        environments = ["uat", "prod"]
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                Write-Host "Name $container_app_name"
                & az containerapp update --name $container_app_name --resource-group $ResourceGroupName --image $container_image
                & az containerapp update --name $container_app_name --resource-group $ResourceGroupName --set-env-vars ConnectionStrings__SqlConnectionString=$connection_string
                ###################################################################
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-windows"
    }
}

step "checkversion" {
    name = "CheckVersion"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CheckVersion.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{containerAppURL} -version #{Octopus.Release.Number}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "healthcheck" {
    name = "HealthCheck"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CallHealthCheckEndpoint.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{containerAppURL}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-log-analytics-workspace" {
    condition = "Variable"
    name = "Create Log Analytics Workspace"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the name of the workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Specify the location for the workspace."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "CapacityReservation",
                        "Free",
                        "LACluster",
                        "PerGB2018",
                        "PerNode",
                        "Premium",
                        "Standalone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Specify the pricing tier: PerGB2018 or legacy tiers (Free, Standalone, PerNode, Standard or Premium) which are not available to all customers."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 120,
                      "metadata": {
                        "description": "Specify the number of days to retain data."
                      }
                    },
                    "resourcePermissions": {
                      "type": "bool",
                      "metadata": {
                        "description": "Specify true to use resource or workspace permissions, or false to require workspace permissions."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-12-01-preview",
                      "name": "[parameters('workspaceName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "sku": {
                          "name": "[parameters('sku')]"
                        },
                        "retentionInDays": "[parameters('retentionInDays')]",
                        "features": {
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('resourcePermissions')]"
                        }
                      }
                    }
                  ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"workspaceName\":{\"value\":\"#{LogAnalyticsWorkspaceName}\"},\"location\":{\"value\":\"#{az_location}\"},\"sku\":{\"value\":\"PerGB2018\"},\"retentionInDays\":{\"value\":120},\"resourcePermissions\":{\"value\":\"True\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-app-insights" {
    condition = "Variable"
    name = "Create App Insights"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of Application Insights resource."
                      }
                    },
                    "regionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Which Azure Region to deploy the resource to. This must be a valid Azure regionId."
                      }
                    },
                    "tagsArray": {
                      "type": "object",
                      "metadata": {
                        "description": "See documentation on tags: https://learn.microsoft.com/azure/azure-resource-manager/management/tag-resources."
                      }
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Log Analytics workspace ID to associate with your Application Insights resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('regionId')]",
                      "tags": "[parameters('tagsArray')]",
                      "kind": "other",
                      "properties": {
                        "Application_Type": "web",
                        "Flow_Type": "Bluefield",
                        "Request_Source": "Octopus",
                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]"
                      }
                    }
                  ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"name\":{\"value\":\"#{AppInsightsName}\"},\"regionId\":{\"value\":\"#{az_location}\"},\"tagsArray\":{\"value\":{}},\"workspaceResourceId\":{\"value\":\"/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourcegroups/#{ResourceGroupName}/providers/microsoft.operationalinsights/workspaces/#{LogAnalyticsWorkspaceName}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-availability-test" {
    condition = "Variable"
    name = "Create Availability Test"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "webtests_healthcheck_name": {
                            "defaultValue": "Availability Test",
                            "type": "String"
                        },
                      	"healthcheck_url": {
                        	"defaultValue": "",
                          	"type": "String"
                        },
                      	"location": {
                        	"defaultValue": "southcentralus",
                          	"type": "String"
                        },
                      	"hidden-link": {
                          	"defaultValue": "",
                          	"type": "String"
                        }
                    },
                    "variables": {},
                    "resources": [
                        {
                            "type": "microsoft.insights/webtests",
                            "apiVersion": "2022-06-15",
                            "name": "[parameters('webtests_healthcheck_name')]",
                            "location": "[parameters('location')]",
                            "tags": {
                                "[parameters('hidden-link')]": "Resource"
                            },
                            "properties": {
                                "SyntheticMonitorId": "[parameters('webtests_healthcheck_name')]",
                                "Name": "Availability Test",
                                "Enabled": true,
                                "Frequency": 300,
                                "Timeout": 30,
                                "Kind": "standard",
                                "RetryEnabled": true,
                                "Locations": [
                                    {
                                        "Id": "us-ca-sjc-azr"
                                    },
                                    {
                                        "Id": "emea-nl-ams-azr"
                                    },
                                    {
                                        "Id": "us-va-ash-azr"
                                    },
                                    {
                                        "Id": "us-tx-sn1-azr"
                                    }
                                ],
                                "Request": {
                                    "RequestUrl": "[replace(parameters('healthcheck_url'), '\"', '')]",
                                    "HttpVerb": "GET",
                                    "ParseDependentRequests": false
                                },
                                "ValidationRules": {
                                    "ExpectedHttpStatusCode": 200,
                                    "IgnoreHttpStatusCode": false,
                                    "ContentValidation": {
                                        "ContentMatch": "Healthy",
                                        "IgnoreCase": false,
                                        "PassIfTextFound": true
                                    },
                                    "SSLCheck": false
                                }
                            }
                        }
                    ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"webtests_healthcheck_name\":{\"value\":\"#{AvailabilityTestName}\"},\"healthcheck_url\":{\"value\":\"http://#{containerAppURL}/_healthcheck\"},\"location\":{\"value\":\"#{az_location}\"},\"hidden-link\":{\"value\":\"hidden-link:/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourceGroups/#{ResourceGroupName}/providers/microsoft.insights/components/#{AppInsightsName}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-automation-account" {
    condition = "Variable"
    name = "Create automation account"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "automationAccountName": {
                            "type": "string"
                        },
                        "location": {
                            "type": "string"
                        },
                        "tags": {
                            "type": "object"
                        },
                        "runbookName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the runbook."
                          }
                        },
                        "webhookName": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the webhook."
                          }
                        },
                        "webhookExpiryTime": {
                          "type":"string",
                          "metadata":{
                            "description":"The expiry time of the webhook."
                          }
                        },   
                        "contentURL": {
                            "type": "string"
                        },
                        "apiKeyValue": {
                          "type": "securestring"
                        },
                        "envNameValue": {
                          "type": "string"
                        },
                        "octoProjectValue": {
                          "type": "string"
                        },
                        "octoURLValue": {
                          "type": "securestring"
                        },
                        "octoRunbookValue": {
                          "type": "string"
                        }, 
                        "octoSpaceValue": {
                          "type": "string"
                        },
                      	"webhookId": {
                        	"type": "string"
                        }
                    },
                    "resources": [
                        {
                            "name": "[parameters('automationAccountName')]",
                            "type": "Microsoft.Automation/automationAccounts",
                            "apiVersion": "2018-06-30",
                            "location": "[parameters('location')]",
                            "tags": "[parameters('tags')]",
                            "properties": {
                                "sku": {
                                    "name": "Basic"
                                }
                            },
                          	"resources": [
                              {
                                "name": "[parameters('runbookName')]",
                                "type": "runbooks",
                                "apiVersion": "2018-06-30",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ],                
                                "properties": {
                                  "runbookType": "PowerShell",
                                  "logProgress": false,
                                  "logVerbose": false,
                                  "publishContentLink": {
                                    "uri": "[parameters('contentURL')]"
                                  }
                                }
                              },
                              {
                                "name": "apiKey",
                                "type": "variables",
                                "apiVersion": "2015-10-31",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "description": "api key",
                                  "isEncrypted": true,
                                  "value": "[concat('\"', parameters('apiKeyValue'), '\"')]"
                                }
                              },      
                              {
                                "name": "envName",
                                "type": "variables",
                                "apiVersion": "2015-10-31",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "description": "environment name",
                                  "isEncrypted": false,
                                  "value": "[concat('\"', parameters('envNameValue'), '\"')]"
                                }
                              },
                              {
                                "name": "octoProject",
                                "type": "variables",
                                "apiVersion": "2019-06-01",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "isEncrypted": false,
                                  "value": "[concat('\"', parameters('octoProjectValue'), '\"')]"
                                }
                              },
                              {
                                "name": "octoURL",
                                "type": "variables",
                                "apiVersion": "2019-06-01",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "isEncrypted": false,
                                  "value": "[concat('\"', parameters('octoURLValue'), '\"')]"
                                }
                              },
                              {
                                "name": "octoRunbook",
                                "type": "variables",
                                "apiVersion": "2019-06-01",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "isEncrypted": false,
                                  "value": "[concat('\"', parameters('octoRunbookValue'), '\"')]"
                                }
                              },
                              {
                                "name": "octoSpace",
                                "type": "variables",
                                "apiVersion": "2019-06-01",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [  
                                  "[parameters('automationAccountName')]"  
                                ], 
                                "properties": {
                                  "isEncrypted": false,
                                  "value": "[concat('\"', parameters('octoSpaceValue'), '\"')]"
                                }
                              }               
                            ]
                        }    
                    ]   
                }
                
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"automationAccountName\":{\"value\":\"#{AutomationAccount}\"},\"location\":{\"value\":\"#{az_location}\"},\"tags\":{\"value\":{}},\"runbookName\":{\"value\":\"#{azrunbookname}\"},\"webhookName\":{\"value\":\"#{webhookName}\"},\"webhookExpiryTime\":{\"value\":\"2025-08-31T23:59:59Z\"},\"contentURL\":{\"value\":\"https://raw.githubusercontent.com/ClearMeasureLabs/onion-architecture-dotnet-7-container-apps/main/run_runbook.ps1\"},\"apiKeyValue\":{\"value\":\"#{azrunbookAPI}\"},\"envNameValue\":{\"value\":\"#{Octopus.Environment.Name}\"},\"octoProjectValue\":{\"value\":\"#{Octopus.Project.Name}\"},\"octoURLValue\":{\"value\":\"#{OctoInstanceURL}\"},\"octoRunbookValue\":{\"value\":\"#{OctoRunbookName}\"},\"octoSpaceValue\":{\"value\":\"#{Octopus.Space.Name}\"},\"webhookId\":{\"value\":\"/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourceGroups/#{ResourceGroupName}/providers/Microsoft.Automation/automationAccounts/TDD-releases-28529-automation/webhooks/#{webhookName}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-automation-webhook" {
    condition = "Variable"
    name = "Create Automation Webhook"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                Install-Module -Name Az -Repository PSGallery -Force
                $securePassword = ConvertTo-SecureString -String $az_login_appkey -AsPlainText -Force
                $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $az_login_appid, $securePassword
                Connect-AzAccount -ServicePrincipal -TenantId $az_login_tenant -Credential $credential 
                Install-Module -Name Az.Automation -Force -AllowClobber
                
                # Define variables
                $resourceGroup = $ResourceGroupName
                $automationAccount = $AutomationAccount
                $psWebhook = $webhookName
                $runbook = "octo-runbook"
                
                # Create webhook
                $newWebhook = New-AzAutomationWebhook `
                    -ResourceGroupName $resourceGroup `
                    -AutomationAccountName $automationAccount `
                    -Name $psWebhook `
                    -RunbookName $runbook `
                    -IsEnabled $True `
                    -ExpiryTime "12/31/2024" `
                    -Force
                
                # Store URL in variable; reveal variable
                $uri = $newWebhook.WebhookURI
                $uri
                Set-OctopusVariable -name "webhookUri" -value $uri
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "create-email-alert-action" {
    condition = "Variable"
    name = "Create Runbook Alert Action"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "actionGroups_runRunbook_name": {
                            "defaultValue": "runRunbook",
                            "type": "String"
                        },
                        "automationAccounts_TDD_releases_28553_automation_externalid": {
                            "defaultValue": "",
                            "type": "String"
                        },
                      	"uri": {
                        	"defaultValue": "",
                          	"type": "String"
                        },
                      	"webhookId": {
                        	"type": "String"
                        }
                    },
                    "variables": {},
                    "resources": [
                        {
                            "type": "microsoft.insights/actionGroups",
                            "apiVersion": "2023-01-01",
                            "name": "[parameters('actionGroups_runRunbook_name')]",
                            "location": "Global",
                            "properties": {
                                "groupShortName": "[parameters('actionGroups_runRunbook_name')]",
                                "enabled": true,
                                "emailReceivers": [],
                                "smsReceivers": [],
                                "webhookReceivers": [],
                                "eventHubReceivers": [],
                                "itsmReceivers": [],
                                "azureAppPushReceivers": [],
                                "automationRunbookReceivers": [
                                    {
                                        "name": "runbook",
                                        "serviceUri": "[parameters('uri')]",
                                        "useCommonAlertSchema": false,
                                        "automationAccountId": "[parameters('automationAccounts_TDD_releases_28553_automation_externalid')]",
                                        "runbookName": "octo-runbook",
                                        "webhookResourceId": "[concat(parameters('automationAccounts_TDD_releases_28553_automation_externalid'), '/webhooks/', parameters('webhookId'))]",
                                        "isGlobalRunbook": false
                                    }
                                ],
                                "voiceReceivers": [],
                                "logicAppReceivers": [],
                                "azureFunctionReceivers": [],
                                "armRoleReceivers": []
                            }
                        }
                    ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"actionGroups_runRunbook_name\":{\"value\":\"#{ActionName}\"},\"automationAccounts_TDD_releases_28553_automation_externalid\":{\"value\":\"/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourceGroups/#{ResourceGroupName}/providers/Microsoft.Automation/automationAccounts/#{AutomationAccount}\"},\"uri\":{\"value\":\"#{Octopus.Action[Create Automation Webhook].Output.webhookUri}\"},\"webhookId\":{\"value\":\"#{webhookName}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-low-availability-metric-alert" {
    condition = "Variable"
    name = "Create Low Availability Metric Alert"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Environment.Name == \"TDD\"}true#{else}#{if EnsureEnvironmentsExist}true#{else}False#{/if}#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "metricAlerts_Prod_UI_Low_Availability_name": {
                            "defaultValue": "Prod-UI Low Availability",
                            "type": "String"
                        },
                        "components_onion_architecture_dotnet_7_containers_Prod_Insights_externalid": {
                            "defaultValue": "",
                            "type": "String"
                        },
                        "actionGroups_Email_Alert_externalid": {
                            "defaultValue": "",
                            "type": "String"
                        }
                    },
                    "variables": {},
                    "resources": [
                        {
                            "type": "microsoft.insights/metricAlerts",
                            "apiVersion": "2018-03-01",
                            "name": "[parameters('metricAlerts_Prod_UI_Low_Availability_name')]",
                            "location": "global",
                            "properties": {
                                "severity": 2,
                                "enabled": true,
                                "scopes": [
                                    "[parameters('components_onion_architecture_dotnet_7_containers_Prod_Insights_externalid')]"
                                ],
                                "evaluationFrequency": "PT1M",
                                "windowSize": "PT5M",
                                "criteria": {
                                    "allOf": [
                                        {
                                            "threshold": 100,
                                            "name": "Metric1",
                                            "metricNamespace": "microsoft.insights/components",
                                            "metricName": "availabilityResults/availabilityPercentage",
                                            "operator": "LessThan",
                                            "timeAggregation": "Average",
                                            "skipMetricValidation": false,
                                            "criterionType": "StaticThresholdCriterion"
                                        }
                                    ],
                                    "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                                },
                                "autoMitigate": true,
                                "targetResourceType": "microsoft.insights/components",
                                "targetResourceRegion": "southcentralus",
                                "actions": [
                                    {
                                        "actionGroupId": "[parameters('actionGroups_Email_Alert_externalid')]",
                                        "webHookProperties": {}
                                    }
                                ]
                            }
                        }
                    ]
                }
                EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"metricAlerts_Prod_UI_Low_Availability_name\":{\"value\":\"#{LowAvailabilityAlertName}\"},\"components_onion_architecture_dotnet_7_containers_Prod_Insights_externalid\":{\"value\":\"/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourceGroups/#{ResourceGroupName}/providers/microsoft.insights/components/#{AppInsightsName}\"},\"actionGroups_Email_Alert_externalid\":{\"value\":\"/subscriptions/#{Octopus.Action.Azure.SubscriptionId}/resourceGroups/#{ResourceGroupName}/providers/microsoft.insights/actionGroups/#{ActionName}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}