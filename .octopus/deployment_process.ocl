step "create-resource-group" {
    condition = "Variable"
    name = "Create Resource Group"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist == \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ResourceGroupName = $ResourceGroupName
                $Location = $az_location
                 
                 Write-Output "Variables:"
                 Write-Output "ResourceGroupName: $ResourceGroupName"
                 Write-Output "Location: $Location"
                
                Write-Output '###############################################'
                Write-Output '##Step1: Create Resource Group '
                $AzureResourceGroup = Get-AzureRmResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue
                if ( $null -eq $AzureResourceGroup)
                {
                Write-Output "Resource Group $ResourceGroupName does not exist, creating one ..."
                $AzureResourceGroup =New-AzureRmResourceGroup -Name $ResourceGroupName -Location $Location
                } 
                else{
                Write-Output "Resource Group $ResourceGroupName already exists ..."
                }
                
                Write-Output '###############################################'
                Write-Output '##Step2: Validate Resource Group '
                
                if ($null -eq $AzureResourceGroup ){
                Throw "Failed to create resource group $AzureResourceGroupName"
                }
                    EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "True"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template" {
    condition = "Variable"
    name = "Create AZ DB"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist == \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = "DatabaseARM.json"
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "DatabaseARMParameters.json"
            Octopus.Action.Azure.TemplateSource = "Package"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Database"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-db-schema" {
    condition = "Variable"
    name = "Create DB Schema"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist == \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Database"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "Scripts\\UpdateAzureSql.ps1"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Database"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "get-db-connection-string" {
    name = "Get DB Connection String"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                $connstring = az sql db show-connection-string --server $DatabaseServerName --name $DatabaseName --client ado.net
                $connstring = $connstring -replace '<username>', $DatabaseUser -replace '<password>', $DatabasePassword -replace '"', ''
                Write-Host "Connection String: $connstring"
                Set-OctopusVariable -name "connstring" -value $connstring
                ###################################################################
                
                
                
                
                
                
                    EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template-1" {
    condition = "Variable"
    name = "Create Container App Environment"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist == \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "location": {
                      "defaultValue": "canadacentral",
                      "type": "String"
                    },
                    "environment_name": {
                      "defaultValue": "myenvironment",
                      "type": "String"
                    }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2022-03-01",
                      "name": "[parameters('environment_name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                      }
                    }
                  ]
                }
                    EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"location\":{\"value\":\"#{az_location}\"},\"environment_name\":{\"value\":\"#{container_app_environment_name}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-an-azure-resource-manager-template-2" {
    condition = "Variable"
    name = "Create Container App"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist == \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzureResourceGroup"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Azure.ResourceGroupDeploymentMode = "Incremental"
            Octopus.Action.Azure.ResourceGroupName = "#{ResourceGroupName}"
            Octopus.Action.Azure.ResourceGroupTemplate = <<-EOT
                {
                  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "containerappName": {
                      "defaultValue": "mycontainerapp",
                      "type": "String"
                    },
                    "location": {
                      "defaultValue": "canadacentral",
                      "type": "String"
                    },
                    "environment_name": {
                      "defaultValue": "myenvironment",
                      "type": "String"
                    },
                    "container_image": {
                      "type": "String"
                    },
                    "registry_password": {
                      "type": "SecureString"
                    },
                    "connection_string": {
                      "type": "SecureString"
                    }
                  },
                  "variables": {},
                  "resources": [
                    {
                      "apiVersion": "2022-03-01",
                      "type": "Microsoft.App/containerApps",
                      "name": "[parameters('containerappName')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "None"
                      },
                      "properties": {
                        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environment_name'))]",
                        "configuration": {
                          "secrets": [
                            {
                              "name": "registrypassword",
                              "value": "[parameters('registry_password')]"
                            }
                          ],          
                          "ingress": {
                            "external": true,
                            "targetPort": 80,
                            "allowInsecure": false,
                            "traffic": [
                              {
                                "latestRevision": true,
                                "weight": 100
                              }
                            ]
                          },
                          "registries": [
                            {
                              "server": "#{registry_login_server}",
                              "username": "#{az_login_appid}",
                              "passwordSecretRef": "registrypassword"
                            }
                          ]
                        },
                        "template": {
                          "revisionSuffix": "[uniqueString(resourceGroup().id, deployment().name)]",
                          "containers": [
                            {
                              "name": "main",
                              "image": "[parameters('container_image')]",
                              "env": [
                                {
                                  "name": "HTTP_PORT",
                                  "value": "80"
                                },
                                {
                                  "name": "ConnectionStrings__SqlConnectionString",
                                  "value": "[parameters('connection_string')]"
                                }
                              ],
                              "resources": {
                                "cpu": 0.25,
                                "memory": "0.5Gi"
                              }
                            }
                          ],
                          "scale": {
                            "minReplicas": 1,
                            "maxReplicas": 1
                          }
                        }
                      }
                    }
                  ]
                }
                    EOT
            Octopus.Action.Azure.ResourceGroupTemplateParameters = "{\"containerappName\":{\"value\":\"#{container_app_name}\"},\"location\":{\"value\":\"#{az_location}\"},\"environment_name\":{\"value\":\"#{container_app_environment_name}\"},\"container_image\":{\"value\":\"#{container_image}\"},\"registry_password\":{\"value\":\"#{az_login_appkey}\"},\"connection_string\":{\"value\":\"#{connection_string}\"}}"
            Octopus.Action.Azure.TemplateSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "get-container-app-fqdn" {
    name = "Get Container App FQDN"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                $fqdn = az containerapp show --name $container_app_name --resource-group $ResourceGroupName --query properties.configuration.ingress.fqdn
                Write-Host "FQDN: $fqdn"
                Set-OctopusVariable -name "app_fqdn" -value $fqdn
                ###################################################################
                
                
                
                
                
                
                    EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "add-revision-to-container-app" {
    condition = "Variable"
    name = "Add Revision to Container App"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if EnsureEnvironmentsExist != \"True\"}true#{/if}"
    }

    action {
        action_type = "Octopus.AzurePowerShell"
        environments = ["uat", "prod"]
        properties = {
            Octopus.Action.Azure.AccountId = "#{AzureAccount}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                Write-Host "Name $container_app_name"
                & az containerapp update --name $container_app_name --resource-group $ResourceGroupName --image $container_image
                & az containerapp update --name $container_app_name --resource-group $ResourceGroupName --set-env-vars ConnectionStrings__SqlConnectionString=$connection_string
                ###################################################################
                
                
                
                
                
                
                    EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-windows"
    }
}

step "checkversion" {
    name = "CheckVersion"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CheckVersion.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{containerAppURL} -version #{Octopus.Release.Number}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "healthcheck" {
    name = "HealthCheck"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CallHealthCheckEndpoint.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{containerAppURL}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}