step "add-revision-to-container-app" {
    name = "Add Revision to Container App"

    action {
        action_type = "Octopus.AzurePowerShell"
        properties = {
            Octopus.Action.Azure.AccountId = "mvpazure"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                #$azPath = "C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin"
                ###################################################################
                #Octopus Deploy's default Hosted Windows install includes
                #az cli, but the version doesn't include the containerapp
                #extension or the upgrade extension.  That's the reason for
                #all the az cli installation work here.  Starting with a
                #fresh agent and fresh install gives us some flexibility
                #in extensions.
                #
                #That also means that the agent doesn't inherit the
                #credentials from Octopus Deploy, so we also have to
                #set up az cli with the relevant information for az
                #login.  Those details are stored as Project Variables
                #for ease of reference and secrecy.
                ###################################################################
                
                ###################################################################
                #Intalls az cli latest version from Microsoft. Essentially 
                #a copy/paste from MS documentation.
                $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; rm .\AzureCLI.msi
                ###################################################################
                
                ###################################################################
                #az cli installer doesn't consistently add the install
                #directory to PATH.  This is here to make sure we can run
                #from whatever default directory the agent lands on.
                $Env:PATH += ";C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin\"
                Write-Host $env:PATH -Split ';'
                ###################################################################
                
                ###################################################################
                #They heavy lifting.  With the cli installed and PATH set
                #all that's left to do is configure it for the subscription.
                & az extension add --name containerapp
                & az login --service-principal -u $az_login_appid -p $az_login_appkey --tenant $az_login_tenant
                & az account set --subscription $subscriptionId
                ###################################################################
                
                ###################################################################
                #All of that to get to this.  This the actual revision
                #update - fetches the latest container image, creates a 
                #new revision in the container app, and sets it active.
                Write-Host "Name $container_app_name"
                & az containerapp update --name $container_app_name --resource-group $ResourceGroupName --image $container_image
                ###################################################################
                
                
                
                
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-windows"
    }
}

step "checkversion" {
    name = "CheckVersion"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CheckVersion.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{AppURL} -version #{Octopus.Release.Number}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "healthcheck" {
    name = "HealthCheck"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "onion-arch-dotnet-7"
            Octopus.Action.Package.PackageId = "ChurchBulletin.Script"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptFileName = "CallHealthCheckEndpoint.ps1"
            Octopus.Action.Script.ScriptParameters = "-server #{AppURL}"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-windows"

        packages {
            acquisition_location = "Server"
            feed = "onion-arch-dotnet-7"
            package_id = "ChurchBulletin.Script"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}