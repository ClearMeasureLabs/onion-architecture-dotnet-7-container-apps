#Reserving space for documentation
#Finalized, committing.


trigger:
    - "*"

variables:
   major: 1
   minor: 1
name: $(major).$(minor).$(Rev:r)

stages:
- stage: 'Integration_Build'
  displayName: 'Build Application'

#Phase 1: Build the prereqs for deployment, including the application and the database.
#DB deploy could be pushed to phase 2 - the only important thing is to make sure that 
#the database is up before the container build starts.  We need the variables to inject
#into appsettings.json before the container pulls that file in.  Updating it after the
#build involves installing some tools and doing some moderately painful awk/sed work
#to fix the file in place.  Easier, faster, and safer to do it beforehand.



  jobs: 
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Integration-Build
      
      steps:

      - task: UseDotNet@2
        displayName: 'Install SDK 7.0.100'
        inputs:
          packageType: 'sdk'
          version: '7.0.100'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '6.0.0'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
            echo $env:Version
            echo $(Build.BuildNumber)
            #gci $(Build.SourcesDirectory) -Recurse

      - task: PowerShell@2
        displayName: Build.ps1
        inputs:
          targetType: filePath
          filePath: ./build.ps1
          arguments: '; CIBuild'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results ./build/test/*.trx'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: 'build/test/**/*.trx'
          mergeTestResults: true
          testRunTitle: 'CI Tests'
        continueOnError: true
        condition: succeededOrFailed()
    
      # The code coverage task only will process a single file. This needs to be enhanced so that all test runs 
      # are consolidated into a single cobertura summary file. For now, only the first file found will be used.
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage UnitTests'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/test/**/In/**/coverage.cobertura.xml'
    
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '.\build\*.nupkg'
          publishVstsFeed: '$(FeedName)'

     
#Phase 2:  Build the Docker container and push it to the registry for consumption in Phase 3.
#With the application already built and packaged in phase 1, all we're doing here is fetching it,
#extracting, and getting it into the container by way of COPY in the dockerfile.

    - job: 'DockerBuildandPush'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        - group: Integration-Build
      dependsOn: Build
 
      steps:
      - task: DownloadPackage@1
        displayName: 'Download UI Package'
        inputs:
          packageType: 'nuget'
          feed: '$(FeedName)'
          view: 'Local'
          definition: 'ChurchBulletin.UI'
          version: '$(Build.BuildNumber)'
          downloadPath: '$(System.DefaultWorkingDirectory)/built'
          extract: true

      - task: Docker@2
        inputs:
          containerRegistry: 'OnionArchACRServiceConnection'
          repository: 'ChurchBulletin.UI'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildNumber)


#DeploytoTDD should be a second stage
- stage: 'TDD'
  displayName: 'TDD'
  jobs: 
    - deployment: 'DeployToTDD'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Integration-Build  
      - name: branch
        value: $[coalesce(variables['system.pullRequest.sourceBranch'], variables['build.sourceBranch'])] 
      - name: TDD-Resource-Group
        value: onion-architecture-dotnet-7-containers-TDD-$(Build.BuildNumber)
      - name: TDD-App-Name
        value: tdd-ui 
      environment: 'TDD'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: OctoInstaller@5
              displayName: 'Install octo cli tools on Windows agent'
              inputs:
                version: '*'

            - task: OctopusCreateRelease@5
              name: 'CreateRelease'
              inputs:
                OctoConnectedServiceName: 'octoServiceConnection'
                Space: '$(OctoSpace)'
                ProjectGroup: '$(OctoProjectGroup)'
                ProjectName: '$(OctoProjectName)'
                ReleaseNumber: '$(Build.BuildNumber)'
                Channel: 'Default'
                GitRef: '$(branch)'
                DeployToEnvironment: 'TDD'
                DeploymentProgress: true
                AdditionalArguments: '--deploymenttimeout=00:30:00 --variable=ResourceGroupName:$(TDD-Resource-Group) --variable=container_app_name:$(TDD-App-Name)' 

            - task: AzureCLI@2
              inputs:
                azureSubscription: 'dotnet-7-containerapp'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az config set extension.use_dynamic_install=yes_without_prompt
                  $containerAppURL = az containerapp show --resource-group $(TDD-Resource-Group) --name $(TDD-App-Name) --query properties.configuration.ingress.fqdn
                  $containerAppURL = $containerAppURL -replace '"', ''
                  [System.Environment]::SetEnvironmentVariable("containerAppURL", $containerAppURL, "User")

            - task: DownloadPackage@1
              displayName: 'Download Acceptance Test Package'
              inputs:
                packageType: 'nuget'
                feed: '$(FeedName)'
                view: 'Local'
                definition: 'ChurchBulletin.AcceptanceTests'
                version: '$(Build.BuildNumber)'
                downloadPath: '$(System.DefaultWorkingDirectory)/tests'
                extract: true

            - task: VSTest@2
              displayName: 'VsTest - AcceptanceTests'
              inputs:
                testSelector: 'testAssemblies'
                testAssemblyVer2: |
                  **\*AcceptanceTests.dll
                  !**\*TestAdapter.dll
                  !**\obj\**
                  searchFolder: '$(System.DefaultWorkingDirectory)/tests'
                uiTests: true
                codeCoverageEnabled: true
                testRunTitle: 'Acceptance Tests'
                diagnosticsEnabled: True

            - task: AzureCLI@2
              displayName: 'Delete TDD Resources'
              inputs:
                azureSubscription: 'dotnet-7-containerapp'
                scriptType: 'ps'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az group delete -n $(TDD-Resource-Group) --yes

- stage: 'UAT'
  displayName: 'UAT'
  jobs: 
    - deployment: 'DeployToUAT'
      pool:
        vmImage: 'windows-latest'
      variables:
        - group: Integration-Build    
      environment: 'UAT'  
      strategy:
        runOnce:
          deploy:
            steps:

            - task: OctoInstaller@5
              displayName: 'Install octo cli tools on Windows agent'
              inputs:
                version: '*'

            - task: OctopusDeployRelease@5
              name: deploytoUAT
              inputs:
                OctoConnectedServiceName: 'octoServiceConnection'
                Space: '$(OctoSpace)'
                ProjectGroup: '$(OctoProjectGroup)'
                Project: '$(OctoProjectName)'
                ReleaseNumber: '$(Build.BuildNumber)'
                Environments: 'UAT'
                ShowProgress: true
                AdditionalArguments: '--deploymenttimeout=00:30:00'
          

- stage: 'Production'
  displayName: 'Prod'  
  jobs: 
    - deployment: 'DeployToProd'
      pool:
        vmImage: 'windows-latest'
      variables:
        - group: Integration-Build    
      environment: 'Prod'
      strategy:
        runOnce:
          deploy:
            steps:
      
            - task: OctoInstaller@5
              displayName: 'Install octo cli tools on Windows agent'
              inputs:
                version: '*'

            - task: OctopusDeployRelease@5
              name: deploytoProd
              inputs:
                OctoConnectedServiceName: 'octoServiceConnection'
                Space: '$(OctoSpace)'
                ProjectGroup: '$(OctoProjectGroup)'
                Project: '$(OctoProjectName)'
                ReleaseNumber: '$(Build.BuildNumber)'
                Environments: 'Prod'
                ShowProgress: true 
                AdditionalArguments: '--deploymenttimeout=00:30:00'