#Reserving space for documentation
#Finalized, committing.


trigger:
    - "*"

variables:
   major: 1
   minor: 1
name: $(major).$(minor).$(Rev:r)

stages:
- stage: 'Integration_Build'
  displayName: 'Build Application'

#Phase 1: Build the prereqs for deployment, including the application and the database.
#DB deploy could be pushed to phase 2 - the only important thing is to make sure that 
#the database is up before the container build starts.  We need the variables to inject
#into appsettings.json before the container pulls that file in.  Updating it after the
#build involves installing some tools and doing some moderately painful awk/sed work
#to fix the file in place.  Easier, faster, and safer to do it beforehand.



  jobs: 
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
      - group: Integration-Build
      steps:

      - task: UseDotNet@2
        displayName: 'Install SDK 7.0.100'
        inputs:
          packageType: 'sdk'
          version: '7.0.100'
      - task: UseDotNet@2
        inputs:
          packageType: 'runtime'
          version: '6.0.0'

      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            [System.Environment]::SetEnvironmentVariable('Version','$(Build.BuildNumber)')
            echo $env:Version
            echo $(Build.BuildNumber)
            #gci $(Build.SourcesDirectory) -Recurse

      - task: OctoInstaller@5
        displayName: 'Install octo cli tools on Windows agent'
        inputs:
          version: '*'

      - task: PowerShell@2
        displayName: Build.ps1
        inputs:
          targetType: filePath
          filePath: ./build.ps1
          arguments: '; CIBuild'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results ./build/test/*.trx'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: 'build/test/*.trx'
          mergeTestResults: true
          testRunTitle: 'CI Tests'
        continueOnError: true
        condition: succeededOrFailed()
    
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/test/UnitTests/**/coverage.cobertura.xml'
          additionalCodeCoverageFiles: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
    
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          packagesToPush: '.\build\*.nupkg'
          publishVstsFeed: '$(FeedName)'

     
#Phase 2:  Build the Docker container and push it to the registry for consumption in Phase 3.
#With the application already built and packaged in phase 1, all we're doing here is fetching it,
#extracting, and getting it into the container by way of COPY in the dockerfile.

    - job: 'DockerBuildandPush'
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        - group: Integration-Build
      dependsOn: Build
 
      steps:
      - task: DownloadPackage@1
        displayName: 'Download UI Package'
        inputs:
          packageType: 'nuget'
          feed: '$(FeedName)'
          view: 'Local'
          definition: 'ChurchBulletin.UI'
          version: '$(Build.BuildNumber)'
          downloadPath: '$(System.DefaultWorkingDirectory)/built'
          extract: true
      - task: Docker@2
        inputs:
          containerRegistry: 'OnionArcServiceConnection'
          repository: 'ChurchBulletin.UI'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            $(Build.BuildNumber)

