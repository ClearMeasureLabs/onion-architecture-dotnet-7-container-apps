name: .NET

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "master" ]

env:
  BUILD_BUILDNUMBER: ${{ github.run_number }}
  OCTOPUS_API_KEY: ${{ secrets.OCTO_API_KEY  }}
  OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
  OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE }}

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x
    - name: Setup .NET 6
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 6.0.x
    - name: Build Script
      run: |
        [System.Environment]::SetEnvironmentVariable('Version','${{ github.run_number }}')
        . .\build.ps1 ; CIBuild


    - name: Push NuGet packages   
      run: |
        foreach($file in (Get-ChildItem ".\build\" -Recurse -Include *.nupkg)) {
          dotnet nuget push $file --source "https://nuget.pkg.github.com/dmarttinen/index.json" --api-key ${{ secrets.PACKAGESAPI }}
        }  


  dockerbuildandpush:
    needs: build

    runs-on: 'ubuntu-latest'

    steps:

    - name: 'Checkout GitHub Action'
      uses: actions/checkout@main

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download UI Package
      run: |
        nuget sources Add -Name github -Source https://nuget.pkg.github.com/dmarttinen/index.json -UserName dmarttinen -Password ${{ secrets.PACKAGESAPI }}
        mkdir -p built
        nuget install ChurchBulletin.UI -Version 1.0.0 -Source "https://nuget.pkg.github.com/dmarttinen/index.json" -Outputdirectory built/ 

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - run: |
        docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/churchbulletin.ui:${{ github.run_number }}
        docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/churchbulletin.ui:${{ github.run_number }}


  TDD:
    needs: dockerbuildandpush
    runs-on: 'windows-latest'
    steps:

    - name: Create a release in Octopus Deploy
      uses: OctopusDeploy/create-release-action@v3
      with:
        project: ${{ vars.OCTOPUS_PROJECT }}
        git_ref: ${{ (github.ref_type == 'tag' && github.event.repository.default_branch ) || (github.head_ref || github.ref) }}
        git_commit: ${{ github.event.after || github.event.pull_request.head.sha }}          

